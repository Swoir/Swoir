{
  "noir_version": "0.30.0+af57471035e4fa7eaffa71693219df6d029dbcde",
  "hash": 12243875825645090696,
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": { "kind": "string", "length": 5 },
        "visibility": "private"
      },
      {
        "name": "b",
        "type": { "kind": "string", "length": 5 },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "array",
          "length": 10,
          "type": { "kind": "string", "length": 5 }
        },
        "visibility": "private"
      }
    ],
    "param_witnesses": {
      "a": [{ "start": 0, "end": 5 }],
      "b": [{ "start": 5, "end": 10 }],
      "c": [{ "start": 10, "end": 60 }]
    },
    "return_type": null,
    "return_witnesses": [],
    "error_types": {}
  },
  "bytecode": "H4sIAAAAAAAA/9Wc+U7bQBjE1+Sk3Pd937cd57A5CwUKFB6iqOFR+thV+RRbtYao/zCWMitFySjSZn67zpfxemPPddrL++N38tp7fxSS19WM9kD3gS6ALoIugS6DroCugu4H/QX0AOhB0EOgh0GPgB4FPQZ6HPQE6EnQU6CnQc+AngU9B3oe9ALoRdBLoJdBr4BeBb0Geh30BuhN0Fugt0HvgN4FvQd6H/QB6EPQR6CPQZ+A9kEHoGugQ9B10A3QTdAt0BHoGPQp6LNEZ1v6Pf6aPId+s15vt2rtIAx++rX4NWr49cZrMwqioBE1ftWiMGxH9agVv8YtPw7qYTt4a8Thm99p2b78z7WgRPR1zvPll5J+PPexeTCe/udawPSd9XvRzT/LdF4DcZFDv5fkgz8P7kv+HPmZLulFwCPyl4m+rpxmEWD69uBYkioCV2Ca1e+16+0iYNzX/DnKtQj0EfkrRF83TrMIMH1n/X5zYkXgBkyz+r11vV0EjPuWP0e5eLXEct2l38+O653TKH4F4lhWib7unWbxY/rO+v3uxIrfPZhm9fvgerv4GfcDf45y8WpF+s7xi9+j0yh+ReJY9hN9PTnN4sf0nfX7w4kVvycwzer32fV28TPuZ/4c5eLVivSj4xe/lx7ntvl5yWmO0tZHHlMm/xcRZuba5IAIM3MpZlCEmXkGNiTCzAxewyLMJSLziAhzmcg8KsJcITKPiTBXiczjIsz9ROYJEWZHZJ4UYWbmsCkRZmYOmxZhZuawGRFmZg6bFWFm5rA5EWZmDpsXYWbmsAURZmYOWxRhZuawJRFmR2ReFmFm5rAVEWZmDlsVYWbmsDURZmYOWxdhZuawDRFmZg7bFGFm5rAtEWZmDtsWYWbmsB0RZkdk3hVhZuawPRFmZg7bF2Fm5rADEWZmDjsUYWbmsCMRZmYOOxZhZuawExFmZg7zRZiZOSwQYXZE5poIMzOHhSLMzBxWF2Fm5rCGCDMzhzVFmJk5rCXCzMxhkQgzM4fFIszMHHYqwszMYWdEZssNxaSv8wy/l4xBesMrq0f2/UxvZmU8tnfe9pLb3mrba2x7b20v6qjr3FTK9u7ZXjbb22V7nWzvj+2Fsb0htlfC9g7YtXS7tmzXWu3ao12LW3WdmzKtu87Nl2xt29Z6be3T1gJtbczWimztxNYS7NzazjXt3MvORWwiLatadrMsY7/t9ltntd9qodUG+67YsXPm/tPSP1tUkudyl/fSVnX/Dpo/jntQpv90K2U+L/2sYub9csaLx/cSZHkL7uMYjHUZn78rvJAKik0AAA==",
  "debug_symbols": "1dndasJAEAXgd9lrL3b2b2Z9lVJKqrEEJIrGQpG+e5PWlZIshXNTnDvXnA8Gx3iEXM22fb28vXT97nA266er2R82zdAd+vF0Ncl+v3c+Nv10PA/NaTDrZFem7bfji/S5Mrtu35p1GF8ughQo3aIUAt3DvpLNKd6iWeKfSZ/olvQcfiWfVyaRsnmdsnm9snmDsnmjsnmTsnlZ2byibN6sa15W1m+srN/4H/st1uedplDWWqystVhZa7Gy1mJ+iLtIWRexsi4SZV0kyrpIHqKLBOmiKV/tAil5yfN8BPMJzDOYFzBfvWvJ+vLZk5uJbGFBsHCw8LCobprc/Vvn41xEWCRYMCwEFvWdh1xElJkga3FCOHE48TipL55dIUILEnGScMI4EZzUt5/LT6izYU7I4oRw4nDicVLdviMpxPGCRJwknDBOBCfV7btQatxFOyfO4oRw4nDicVLffgqFsF+QiJOEE8aJ4KS+feFC8vz/EHmLE8KJw4nHyHh4b05d87pvp2ct07VLvymPXsbj8HH8uTJmvwA=",
  "file_map": {
    "3": {
      "source": "// docs:start:eq-trait\ntrait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\nimpl Eq for Field { fn eq(self, other: Field) -> bool { self == other } }\n\nimpl Eq for u64 { fn eq(self, other: u64) -> bool { self == other } }\nimpl Eq for u32 { fn eq(self, other: u32) -> bool { self == other } }\nimpl Eq for u8 { fn eq(self, other: u8) -> bool { self == other } }\nimpl Eq for u1 { fn eq(self, other: u1) -> bool { self == other } }\n\nimpl Eq for i8 { fn eq(self, other: i8) -> bool { self == other } }\nimpl Eq for i32 { fn eq(self, other: i32) -> bool { self == other } }\nimpl Eq for i64 { fn eq(self, other: i64) -> bool { self == other } }\n\nimpl Eq for () { fn eq(_self: Self, _other: ()) -> bool { true } }\nimpl Eq for bool { fn eq(self, other: bool) -> bool { self == other } }\n\nimpl<T, N> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T] where T: Eq {\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<N> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3) & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\nstruct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n// docs:start:ord-trait\ntrait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n\nimpl<T, N> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v1 } else { v2 }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v2 } else { v1 }\n}\n\nmod cmp_tests {\n    use crate::cmp::{min, max};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "46": {
      "source": "fn main(a: str<5>, b: str<5>, c: [str<5>; 10]) {\n    assert(a != b);\n    assert(c[0] == a);\n    assert(c[1] == b);\n    assert(c[2] == a);\n    assert(c[3] == b);\n    assert(c[4] == a);\n    assert(c[5] == b);\n    assert(c[6] == a);\n    assert(c[7] == b);\n    assert(c[8] == a);\n    assert(c[9] == b);\n}\n\n#[test]\nfn test_main() {\n    main(\n        \"hello\",\n        \"world\",\n        [\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\"\n    ]\n    );\n}\n",
      "path": "/Users/madztheo/Documents/Ocelots/libs/Swoir/Tests/SwoirTests/Fixtures/contracts/string/src/main.nr"
    }
  },
  "names": ["main"]
}
