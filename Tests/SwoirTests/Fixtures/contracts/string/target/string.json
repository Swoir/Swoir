{"noir_version":"0.32.0+5ef9daa8fb8d55b194d38d540a79dc29f0090351","hash":5357119975110943856,"abi":{"parameters":[{"name":"a","type":{"kind":"string","length":5},"visibility":"private"},{"name":"b","type":{"kind":"string","length":5},"visibility":"private"},{"name":"c","type":{"kind":"array","length":10,"type":{"kind":"string","length":5}},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/9Wc6U7bQBSFx2Rl3/d938GOszhsLQUKFHiIooZH6WNX5SiOOqJH/MmxlDsSMjqRbu438dwcj28cuPZ4ef/7nf4fvP/l0iNG+YMWEK2PaDmi5YlWIFqRaCWilYnWT7QBog0SbYhow0QbIdoo0caINk60CaJNEm2KaNNEmyHaLNHmiDZPtAWiLRJtiWjLRFsh2irR1oi2TrQNom0SbYto20TbIdou0faItk+0A6IdEu2IaMdEOyHaKdFCokVEqxAtJlqVaDWi1YnWIFpCtCbRzoh2nmr+yKXHr+kxDuvVaqtRaUVx9DOsNF+TWlitvdaTKIlqSe1XJYnjVlJNGs3XZiNsRtW4Fb3VmvFb2B5+rLC7ERWEeV3o8goLaZzA/T+CD/MZdjciZd5+vpdZJnyZQdwr8UmaBfeVN8GiuKEXUr5YAyF/UZjXF2dzsSrzDsi5lFnC6rjXrrcXK7ivyQSHXQ4vpHyx9gn5S8K8vjmbi1WZt5/vTZYJ32QQ99b19mIF9603waK4meQKB3BN4nY7r3fORpHKCeeyLMzru7NZpJR5+/neZ5nwfQZxH1xvFylwP3gTLIqbSa4opndOX6QenY0ilRfOZb8wrx/OZpFS5u3n+5Rlwk8ZxH12vV2kwP3sTbAobia5opg+On2Reulxbnw+Lxl9Rp3RJ55TJf+AEWbl3tmgEWblFsSQEWblFc2wEWalQRoxwlwQMo8aYS4KmceMMJeEzONGmMtC5gkjzP1C5kkjzE7IPGWEWenDpo0wK33YjBFmpQ+bNcKs9GFzRpiVPmzeCLPShy0YYVb6sEUjzEoftmSEWenDlo0wOyHzihFmpQ9bNcKs9GFrRpiVPmzdCLPSh20YYVb6sE0jzEoftmWEWenDto0wK33YjhFmpQ/bNcLshMx7RpiVPmzfCLPShx0YYVb6sEMjzEofdmSEWenDjo0wK33YiRFmpQ87NcKs9GGhEWalD4uMMDshc8UIs9KHxUaYlT6saoRZ6cNqRpiVPqxuhFnpwxpGmJU+LDHCrPRhTSPMSh92ZoRZ6cPOhczwDfk01oXHH6RzkEtfRz3C+uw85Ak86J1HLzl6q9FrjN5b9KKOufZDlNC7h1429Hah1wm9P+iFQW8IeiXQO4B76bi3jHutuPeIe3Frrv0QoQ3XfkgQ9rax14u9T+wFYm8Me0XYO8FeAq6tca2Jay9ci+CDhFeFd4OXwXc7vutQ+1ELURuwVnDunLtPRufHFqX0WCSvdUbZ/Ttp/jjtSdn5RVrBe7/Oe+W914teLoE+l8jn9Z9A1hnjZH7+AjEz1HDCTAAA","debug_symbols":"1dndasJAEAXgd9lrL3b2b2Z9lVJK/CsBiaKxUMR3b9K6UpKlcG6Kc+ea88GQIZxArmazXV3e39pudzib5cvV7A/rpm8P3XC6mmS//zsfm248nvvm1Jtlsguz7TbDj3RbmF2735pljLfFLEjBh3uUQsyPcKhkM5dozuHPpE90T3r+nXxdmETK5nXK5vXK5g3K5o3K5k3K5mVl84qyebOueVlZv7GyfuN/7LdUn3ecQllrsbLWYmWtxcpai/kpniJlXcTKukiUdZEo6yJ5ii4SpIvGfLULpOQlT/MRzCcwz2BewHz1qSXry70nNxHZwoJg4WDhYVHdNLlUhI9TEWGRYMGwEFjUdx5yEVEmgqzFCeHE4cTjpL54doUIzUjEScIJ40RwUt9+jnfibJgSsjghnDiceJxUt+9ICnE8IxEnCSeME8FJdfsulBp30U6JszghnDiceJzUt/94f3DsZyTiJOGEcSI4qW9fuJA8fR8ib3FCOHE48RgZDh/NqW1W++34rWW8dunW5dPLcOw/jz9XhuwX","file_map":{"4":{"source":"// docs:start:eq-trait\ntrait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\nimpl Eq for Field { fn eq(self, other: Field) -> bool { self == other } }\n\nimpl Eq for u64 { fn eq(self, other: u64) -> bool { self == other } }\nimpl Eq for u32 { fn eq(self, other: u32) -> bool { self == other } }\nimpl Eq for u8 { fn eq(self, other: u8) -> bool { self == other } }\nimpl Eq for u1 { fn eq(self, other: u1) -> bool { self == other } }\n\nimpl Eq for i8 { fn eq(self, other: i8) -> bool { self == other } }\nimpl Eq for i32 { fn eq(self, other: i32) -> bool { self == other } }\nimpl Eq for i64 { fn eq(self, other: i64) -> bool { self == other } }\n\nimpl Eq for () { fn eq(_self: Self, _other: ()) -> bool { true } }\nimpl Eq for bool { fn eq(self, other: bool) -> bool { self == other } }\n\nimpl<T, let N: u32> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T] where T: Eq {\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3) & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\nstruct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n// docs:start:ord-trait\ntrait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v1 } else { v2 }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v2 } else { v1 }\n}\n\nmod cmp_tests {\n    use crate::cmp::{min, max};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"55":{"source":"fn main(a: str<5>, b: str<5>, c: [str<5>; 10]) {\n    assert(a != b);\n    assert(c[0] == a);\n    assert(c[1] == b);\n    assert(c[2] == a);\n    assert(c[3] == b);\n    assert(c[4] == a);\n    assert(c[5] == b);\n    assert(c[6] == a);\n    assert(c[7] == b);\n    assert(c[8] == a);\n    assert(c[9] == b);\n}\n\n#[test]\nfn test_main() {\n    main(\n        \"hello\",\n        \"world\",\n        [\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\"\n    ]\n    );\n}\n","path":"/Users/madztheo/Documents/Ocelots/libs/Swoir/Tests/SwoirTests/Fixtures/contracts/string/src/main.nr"}},"names":["main"]}