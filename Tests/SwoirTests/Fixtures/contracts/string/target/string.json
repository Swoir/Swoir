{"noir_version":"0.35.0+2a0d211b92d002fa75855d4ba27267f8892dd52c","hash":10438988552438118944,"abi":{"parameters":[{"name":"a","type":{"kind":"string","length":5},"visibility":"private"},{"name":"b","type":{"kind":"string","length":5},"visibility":"private"},{"name":"c","type":{"kind":"array","length":10,"type":{"kind":"string","length":5}},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/9Wc6U7bQBSFxwmBUPYl7Pu+Y8dZHLaWAgUKPERRw6P0uctpbGlKj/onx1LuSMjRsXS53yRzczy+ceA64+X971f6Onj/K6ZHjPIHLSBagWhFovURrUS0fqINEK1MtEGifSLaENGGiTZCtFGijRFtnGgTRJsk2hTRpolWIdoM0WaJNke0eaItEG2RaEtEWybaCtFWibZGtHWibRBtk2hbRNsm2g7Rdom2R7R9oh0Q7ZBoR0Q7JtoJ0U6JFhItIlqVaDHRakSrE61BtCbREqK1iHZGtPNU80cxPX5Jj3HYqNXazWo7iqMfYbX1mtTDWv21kURJVE/qP6tJHLeTWtJsvbaaYSuqxe3ord6K38LO8GOF3Y2oJMzrQpdXWErjBO7fEXyYz7C7ESnz9vO9zDPhyxziXok/pHlwX3kTLIobeiHlizUQ8vcL8/rsbC5WZd4B+SzllrA67rXr7cUK7msywWGXwwspX6wFIf+AMK+vzuZiVebt53uTZ8I3OcS9db29WMF9602wKG4uucIBXJO43c7rnbNRpIrCuSwL8/rmbBYpZd5+vvd5JnyfQ9wH19tFCtwP3gSL4uaSK4rpndMXqUdno0j1CedyUJjXd2ezSCnz9vN9yjPhpxziPrveLlLgfvYmWBQ3l1xRTB+dvki99Dg33p+XnN6jbBTEc6rk/2SEWbl3NmSEWbkFMWyEWXlFM2KEWWmQRo0wl4TMY0aY+4XM40aYB4TME0aYy0LmSSPMg0LmKSPMTsg8bYRZ6cMqRpiVPmzGCLPSh80aYVb6sDkjzEofNm+EWenDFowwK33YohFmpQ9bMsKs9GHLRpidkHnFCLPSh60aYVb6sDUjzEoftm6EWenDNowwK33YphFmpQ/bMsKs9GHbRpiVPmzHCLPSh+0aYXZC5j0jzEoftm+EWenDDowwK33YoRFmpQ87MsKs9GHHRpiVPuzECLPSh50aYVb6sNAIs9KHRUaYnZC5aoRZ6cNiI8xKH1Yzwqz0YXUjzEof1jDCrPRhTSPMSh+WGGFW+rCWEWalDzszwqz0YedCZviGvjTWhccfpHNQTM+jHmF9Zg95Ag9659FLjt5q9Bqj9xa9qOOu8xAl9O6hlw29Xeh1Qu8PemHQG4JeCfQO4F467i3jXivuPeJe3JrrPERow3UeEoS9bez1Yu8Te4HYG8NeEfZOsJeAa2tca+LaC9cieCPhVeHd4GXw3Y7vOtR+1ELUBqwVfHbO3X9G9mOLQe847Z1T/7Krkk/sP0UmG1n+FY+p4J1X/U/EyH5JV/LiFzwtO1/2cgn0uUReyL+enJaNKe91du43za1pcXpNAAA=","debug_symbols":"1dnRasJAEAXQf9nnPOzsZncm/kopJWqUQIiisVDEf29sjcpmKdyX4ryZ5B4ZHJIb8GzWzfK0/Wj7ze5oFm9n0+1W9dDu+vHobKL9OXfc1/318DjUh8Esoi1M06/HD/FSmE3bNWbB9lLMgs5bvkWd9+4ejpksSVndsiSh+jtrg5uyNoan7HthIimc2Smc2SucuVQ4c1A4c1Q4MyucWRTOXOmbmRX2ICvsQf7PHvSPmWOVzKGw21hht7HCbmOF3cb8IveVwr5ihX0lCvtKFPaVvEhfCdJX13y2K2TKS5XmA5iPYJ7BvID57D1M1k+/KLlEVBYWBAsHCw+L7KbJxUn4kIoAiwgLhoXAIr/zx50fJBFkLU4IJw4nHif5xfP9YSY0IwEnESeME8FJfvtVmJ63tkwJWZwQThxOPE6y23ckE3E8IwEnESeME8FJdvuupIkEmxJncUI4cTjxOMlvP5YTYT8jAScRJ4wTwUl++3J/16rS9yHyFieEE4cTj5HxYHlou67dfjz/kzOe/qwPbb3smtvh5tSvnq4OX/vfK+NXfAM=","file_map":{"6":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(s, quote { Eq }, signature, for_each_field, quote { & }, body)\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T] where T: Eq {\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v1 } else { v2 }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v2 } else { v1 }\n}\n\nmod cmp_tests {\n    use crate::cmp::{min, max};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"70":{"source":"fn main(a: str<5>, b: str<5>, c: [str<5>; 10]) {\n    assert(a != b);\n    assert(c[0] == a);\n    assert(c[1] == b);\n    assert(c[2] == a);\n    assert(c[3] == b);\n    assert(c[4] == a);\n    assert(c[5] == b);\n    assert(c[6] == a);\n    assert(c[7] == b);\n    assert(c[8] == a);\n    assert(c[9] == b);\n}\n\n#[test]\nfn test_main() {\n    main(\n        \"hello\",\n        \"world\",\n        [\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\"\n    ]\n    );\n}\n","path":"/Users/madztheo/Documents/Ocelots/libs/Swoir/Tests/SwoirTests/Fixtures/contracts/string/src/main.nr"}},"names":["main"],"brillig_names":["directive_invert"]}